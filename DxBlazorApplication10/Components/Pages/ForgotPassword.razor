@page "/forgot-password"
@layout LoginLayout
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>비밀번호 찾기</h3>
<p>계정 아이디를 입력하시면 비밀번호 재설정 절차를 안내해 드립니다.</p>

<EditForm Model="@_model" OnValidSubmit="HandleRequest" style="width: 25rem;" Context="editFormContext">
    <DataAnnotationsValidator />
    <DxFormLayout>
        <DxFormLayoutItem>
            <DxTextBox @bind-Text="_model.UserId" NullText="아이디 입력" />
            <ValidationMessage For="@(() => _model.UserId)" />
        </DxFormLayoutItem>
        <DxFormLayoutItem>
            <DxButton SubmitFormOnClick="true" Text="제출" RenderStyle="ButtonRenderStyle.Primary" />
        </DxFormLayoutItem>
    </DxFormLayout>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-info mt-3" style="width: 25rem;">@_message</div>
}

@code {
    private readonly ForgotPasswordModel _model = new();
    private string? _message;

    private async Task HandleRequest()
    {
        var token = await UserService.GeneratePasswordResetTokenAsync(_model.UserId);

        // 실제로는 이메일 발송 후 아래 메시지를 표시합니다.
        // 여기서는 시뮬레이션을 위해 재설정 페이지로 바로 이동하는 링크를 포함합니다.
        if (token != null)
        {
            // ✨ 1. 토큰을 URL에 사용하기 안전한 문자열로 인코딩합니다.
            var urlSafeToken = System.Net.WebUtility.UrlEncode(token);

            // ✨ 2. 인코딩된 토큰으로 링크를 생성합니다.
            var resetLink = NavigationManager.ToAbsoluteUri($"/reset-password?token={urlSafeToken}");

            _message = $"비밀번호 재설정 요청이 접수되었습니다. \n(시뮬레이션: 실제로는 이메일로 발송됩니다. 링크: {resetLink.AbsoluteUri} )";
        }
        else
        {
            _message = "입력하신 아이디를 찾을 수 없습니다.";
        }
    }

    public class ForgotPasswordModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "아이디를 입력하세요.")]
        public string UserId { get; set; } = string.Empty;
    }
}