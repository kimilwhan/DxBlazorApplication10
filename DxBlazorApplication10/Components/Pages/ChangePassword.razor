@page "/change-password"
@* @attribute [Authorize] // 로그인한 사용자만 접근 가능 *@

@inject AuthService AuthService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>비밀번호 변경</PageTitle>

<h3>비밀번호 변경</h3>

<div class="card" style="width: 30rem;">
    <div class="card-body">
        <EditForm Model="@_model" OnValidSubmit="HandlePasswordChange">
            <DataAnnotationsValidator />

             <div class="mb-3">
                <label class="form-label">사용자 ID</label>
                <DxTextBox @bind-Text="_model.UserId" ReadOnly="@_isUserAuthenticated" />
                <ValidationMessage For="@(() => _model.UserId)" />
            </div>

            <div class="mb-3">
                <label class="form-label">현재 비밀번호</label>
                <DxTextBox @bind-Text="_model.CurrentPassword" Password="true" />
                <ValidationMessage For="@(() => _model.CurrentPassword)" />
            </div>

            <div class="mb-3">
                <label class="form-label">새 비밀번호</label>
                <DxTextBox @bind-Text="_model.NewPassword" Password="true" />
                <ValidationMessage For="@(() => _model.NewPassword)" />
            </div>

            <div class="mb-3">
                <label class="form-label">새 비밀번호 확인</label>
                <DxTextBox @bind-Text="_model.ConfirmPassword" Password="true" />
                <ValidationMessage For="@(() => _model.ConfirmPassword)" />
            </div>
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success">@_successMessage</div>
            }

            <DxButton SubmitFormOnClick="true" Text="비밀번호 변경" RenderStyle="ButtonRenderStyle.Primary" />
        </EditForm>
    </div>
</div>

@code {
    private readonly ChangePasswordModel _model = new();
    private string? _errorMessage;
    private string? _successMessage;
    private bool _isUserAuthenticated; // ✨ 2. 로그인 상태를 저장할 플래그

    // ✨ 3. 페이지 초기화 시 로그인 상태 확인
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _isUserAuthenticated = true;
            _model.UserId = user.Identity.Name!; // 로그인된 사용자의 ID로 모델 값 설정
        }
        else
        {
            _isUserAuthenticated = false;
        }
    }

    private async Task HandlePasswordChange()
    {
        _errorMessage = null;
        _successMessage = null;

        // 1. 현재 비밀번호가 맞는지 확인 (모델의 UserId 사용)
        var isCurrentPasswordValid = await AuthService.VerifyCredentialsAsync(_model.UserId, _model.CurrentPassword);
        if (!isCurrentPasswordValid)
        {
            _errorMessage = "아이디 또는 현재 비밀번호가 일치하지 않습니다.";
            return;
        }

        // 2. 새 비밀번호 해시
        var newHashedPassword = BCrypt.Net.BCrypt.HashPassword(_model.NewPassword);

        // 3. UserService를 통해 비밀번호 업데이트
        var success = await UserService.ChangePasswordAsync(_model.UserId, newHashedPassword);

        if (success)
        {
            _successMessage = "비밀번호가 성공적으로 변경되었습니다.";
            _model.Clear();
            StateHasChanged();

            if (_isUserAuthenticated)
            {
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/user-profile");
            }
        }
        else
        {
            _errorMessage = "비밀번호 변경 중 오류가 발생했습니다.";
        }
    }

    public class ChangePasswordModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "사용자ID를 입력하세요.")]
        public string UserId { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "현재 비밀번호를 입력하세요.")]
        public string CurrentPassword { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "새 비밀번호를 입력하세요.")]
        [System.ComponentModel.DataAnnotations.MinLength(6, ErrorMessage = "비밀번호는 6자 이상이어야 합니다.")]
        public string NewPassword { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "새 비밀번호 확인을 입력하세요.")]
        [System.ComponentModel.DataAnnotations.Compare(nameof(NewPassword), ErrorMessage = "새 비밀번호가 일치하지 않습니다.")]
        public string ConfirmPassword { get; set; } = string.Empty;
        
        public void Clear()
        {
            UserId = string.Empty;
            CurrentPassword = string.Empty;
            NewPassword = string.Empty;
            ConfirmPassword = string.Empty;
        }
    }
}