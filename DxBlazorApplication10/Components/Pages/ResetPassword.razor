@page "/reset-password"
@layout LoginLayout
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>비밀번호 재설정</h3>

@if (_isTokenValid)
{
    <EditForm Model="@_model" OnValidSubmit="HandleResetPassword" style="width: 25rem;" Context="editFormContext">
        <DataAnnotationsValidator />
        <p>새로운 비밀번호를 입력하세요.</p>
        <DxFormLayout>
            <DxFormLayoutItem>
                <DxTextBox @bind-Text="_model.Password" Password="true" NullText="새 비밀번호" />
                <ValidationMessage For="@(() => _model.Password)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem>
                <DxTextBox @bind-Text="_model.ConfirmPassword" Password="true" NullText="새 비밀번호 확인" />
                <ValidationMessage For="@(() => _model.ConfirmPassword)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem>
                <DxButton SubmitFormOnClick="true" Text="비밀번호 재설정" RenderStyle="ButtonRenderStyle.Primary" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
}
else
{
    <div class="alert alert-danger">@_message</div>
}


@code {
    [SupplyParameterFromQuery]
    public string? token { get; set; }

    private bool _isTokenValid = false;
    private string _message = "유효하지 않거나 만료된 링크입니다.";
    private readonly ResetPasswordModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(token))
        {
            var user = await UserService.GetUserByResetTokenAsync(token);
            if (user != null)
            {
                _isTokenValid = true;
            }
        }
    }

    private async Task HandleResetPassword()
    {
        if (!string.IsNullOrEmpty(token))
        {
            var success = await UserService.ResetPasswordAsync(token, _model.Password);
            if (success)
            {
                _message = "비밀번호가 성공적으로 재설정되었습니다. 로그인 페이지로 이동합니다.";
                _isTokenValid = false; // 폼 숨기기
                await Task.Delay(3000); // 3초 후 이동
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _message = "비밀번호 재설정 중 오류가 발생했습니다. 다시 시도해 주세요.";
                _isTokenValid = false; // 폼 숨기기
            }
        }
    }

    public class ResetPasswordModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Compare(nameof(Password), ErrorMessage = "비밀번호가 일치하지 않습니다.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}