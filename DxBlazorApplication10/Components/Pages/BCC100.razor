@page "/BCC100"
@inherits BasePageComponent
@using System.Text.Json
@rendermode InteractiveServer
@inject MessageBoxService MsgBoxService

<h3>제품 관리</h3>

<style>
    .right-pane-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        gap: 1rem; /* 상단 폼과 하단 탭 사이의 간격 */
    }

    .form-container {
        flex-shrink: 0; /* 컨테이너 크기가 줄어들 때 폼 크기는 줄어들지 않도록 설정 */
    }

    .tabs-container {
        flex-grow: 1; /* 남은 공간을 탭 영역이 모두 차지하도록 설정 */
        min-height: 0; /* flex-grow가 올바르게 작동하기 위해 필요 */
        display: flex;
        flex-direction: column;
    }
    
    .tabs-container .card-body {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .tabs-container .dx-tabs-content {
        height: 100%;
    }
</style>

<DxSplitter>
    <Panes>
        <DxSplitterPane Size="35%">
            <DxGridEx Data="@_products" @ref="Grid"
                    AllowSelectRowByClick="true"
                    SelectionMode="GridSelectionMode.Single"            
                    SelectedDataItem="@SelectedProduct"
                    SelectedDataItemChanged="@OnGridSelectionChanged"
                    PageSize="20"
                    ShowFilterRow="false"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    title="test">
                <ColumnsEx>
                    <DxGridDataColumn FieldName="Id" Caption="ID" Width="80px" />
                    <DxGridDataColumn FieldName="Name" Caption="제품명" />
                    <DxGridDataColumn FieldName="Category" Caption="카테고리" Width="150px" />
                    <DxGridDataColumn FieldName="Price" Caption="가격" DisplayFormat="c" Width="120px" />
                </ColumnsEx>
            </DxGridEx>
        </DxSplitterPane>
        <DxSplitterPane>
            @if (SelectedProduct != null)
            {
                <div class="right-pane-container">
                    <div class="form-container">
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="제품명">
                                <DxTextBox @bind-Value="@SelectedProduct.Name" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="카테고리">
                                <DxComboBox Data="@_categories" @bind-Value="@SelectedProduct.Category" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="가격">
                                <DxSpinEdit @bind-Value="@SelectedProduct.Price" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="재고">
                                <DxSpinEdit @bind-Value="@SelectedProduct.Stock" />
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </div>

                    <div class="tabs-container">
                        <DxTabs>
                            <DxTabPage Text="부품 정보">
                                <DxGrid Data="@_productParts" PageSize="10">
                                    <Columns>
                                        <DxGridDataColumn FieldName="PartName" Caption="부품명" />
                                        <DxGridDataColumn FieldName="Quantity" Caption="수량" />
                                        <DxGridDataColumn FieldName="Supplier" Caption="공급업체" />
                                    </Columns>
                                </DxGrid>
                            </DxTabPage>
                            <DxTabPage Text="변경 이력">
                                <DxGrid Data="@_productLogs" PageSize="10">
                                    <Columns>
                                        <DxGridDataColumn FieldName="ChangeDate" Caption="변경일" DisplayFormat="yyyy-MM-dd HH:mm" />
                                        <DxGridDataColumn FieldName="User" Caption="변경자" />
                                        <DxGridDataColumn FieldName="Action" Caption="작업내용" />
                                    </Columns>
                                </DxGrid>
                            </DxTabPage>
                        </DxTabs>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center h-100">
                    <p>왼쪽 목록에서 제품을 선택하세요.</p>
                </div>
            }
        </DxSplitterPane>
    </Panes>
</DxSplitter>


@code {

    //DxGridEx<Product> Grid2;

    // 컨텍스트 메뉴 참조 및 위치 변수
    DxGridEx<Product> Grid;

    // 데이터 모델
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public decimal Price { get; set; }
        public int Stock { get; set; }
    }
    public record ProductPart(int Id, string PartName, int Quantity, string Supplier);
    public record ProductLog(int Id, DateTime ChangeDate, string User, string Action);

    // 데이터 소스
    private List<Product> _products = new();
    private List<string> _categories = new() { "전자제품", "가구", "식료품" };
    private List<ProductPart> _productParts = new();
    private List<ProductLog> _productLogs = new();

    // 선택된 항목
    // --- 수정된 부분: 간단한 자동 속성으로 변경하여 @bind와의 충돌을 피합니다.
    public Product? SelectedProduct { get; set; }

    protected override void OnInitialized()
    {
        // 샘플 데이터 생성
        _products = Enumerable.Range(1, 50).Select(i => new Product
        {
            Id = 1000 + i,
            Name = $"제품 {i}",
            Category = _categories[i % 3],
            Price = 10000 * (i % 10 + 1),
            Stock = i * 5
        }).ToList();
    }

    // --- 수정된 부분: 이 메서드가 그리드의 'SelectedDataItemChanged' 이벤트 핸들러로 직접 사용됩니다.
    private void OnGridSelectionChanged(object selectedItem)
    {
        if (SelectedProduct == selectedItem) return;

        SelectedProduct = (Product)selectedItem;

        if (selectedItem == null)
        {
            //StartTrackingChanges(null); // 선택 해제 시 추적 중지
            return;
        }

        // 상세 데이터 로드 (실제로는 API 호출)
        _productParts = Enumerable.Range(1, 3).Select(i => new ProductPart(i, $"부품 {i}", i * 2, "공급업체 " + (i % 2 + 1))).ToList();
        _productLogs = Enumerable.Range(1, 5).Select(i => new ProductLog(i, DateTime.Now.AddDays(-i), "User" + (i % 3), "속성 변경")).ToList();

        // BasePageComponent의 변경 추적 기능 시작
        //StartTrackingChanges(selectedItem);
    }

    private void OnDataChanged(object? _)
    {
        // 데이터가 변경되면 저장 버튼 활성화
        // if (HasChanges)
        // {
        //     ToolbarState.SetSaveButtonState(true);
        // }
    }

    protected override void OnSearch()
    {
        MsgBoxService.ShowAlert("완료", "조회");
    }

    protected override void OnAdd()
    {
        MsgBoxService.ShowAlert("완료", "신규");        
    }

    protected override void OnSave()
    {
        Console.WriteLine("저장 로직 실행...");
        Console.WriteLine($"저장된 데이터: {JsonSerializer.Serialize(SelectedProduct)}");        
        MsgBoxService.ShowAlert("완료", "저장");
    }
    protected override void OnDelete()
    {
        MsgBoxService.ShowAlert("완료", "삭제");                
    }

    protected override void OnPrint()
    {
        MsgBoxService.ShowAlert("완료", "프린트");                
    }
}