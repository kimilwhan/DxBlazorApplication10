@page "/bcc100"
@attribute [Authorize]
@rendermode InteractiveServer

@inherits BasePageComponent
@inject MessageBoxService MsgBoxService
@inject IDapperService DapperService

@using System.Text.Json

<h3>제품 관리</h3>

<style>
    .right-pane-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        gap: 1rem; /* 상단 폼과 하단 탭 사이의 간격 */
    }

    .form-container {
        flex-shrink: 0; /* 컨테이너 크기가 줄어들 때 폼 크기는 줄어들지 않도록 설정 */
    }

    .tabs-container {
        flex-grow: 1; /* 남은 공간을 탭 영역이 모두 차지하도록 설정 */
        min-height: 0; /* flex-grow가 올바르게 작동하기 위해 필요 */
        display: flex;
        flex-direction: column;
    }
    
    .tabs-container .card-body {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .tabs-container .dx-tabs-content {
        height: 100%;
    }
</style>

<DxToolbar>
    <DxToolbarItem Text="조회" IconCssClass="bi bi-search" Click="OnSearch" />
    <DxToolbarItem Text="신규" IconCssClass="bi bi-add" Click="OnAdd" />
    <DxToolbarItem Text="저장" IconCssClass="bi bi-save" Click="OnSave" />
    <DxToolbarItem Text="삭제" IconCssClass="bi bi-trash" Click="OnDelete" />
    <DxToolbarItem Text="인쇄" IconCssClass="bi bi-print" Click="OnPrint" />
</DxToolbar>

<DxSplitter>
    <Panes>
        <DxSplitterPane Size="35%">
            <DxGridEx @ref="Grid" TData="BCC100_Model" Data="@ViewModel.GridItems"
                AllowSelectRowByClick="true"
                SelectionMode="GridSelectionMode.Single"
                SelectedDataItem="@ViewModel.SelectedItem"
                SelectedDataItemChanged="@(item => OnGridSelectionChanged(item))"
                PageSize="20"
                ShowFilterRow="false"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer">
                <ColumnsEx>
                    <DxGridDataColumn FieldName="co_cd" Caption="법인기호" Width="80px" />
                    <DxGridDataColumn FieldName="co_nm" Caption="법인명" />                    
                </ColumnsEx>
            </DxGridEx>
        </DxSplitterPane>
        <DxSplitterPane>
            <div class="right-pane-container">
                <div class="form-container">
                    @* EditForm을 사용하여 데이터 유효성 검사를 활성화합니다. *@
                    
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="법인기호">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem!.co_cd" Enabled="@ViewModel.IsFormEnabled" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인설립일">
                                <DxDateEdit @bind-Date="@ViewModel.SelectedItem!.co_dt" 
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    NullText="Select a date..." />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인명">
                                @* <DxComboBox Data="@_categories" @bind-Value="@SelectedProduct.Category" /> *@
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.co_nm" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인개업일">
                                <DxDateEdit @bind-Date="@ViewModel.SelectedItem.fr_dt" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인명(약칭)">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.co_bnm" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인폐업일">
                                <DxTextBox @bind-Value="@ViewModel.SelectedItem.to_dt" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="대표자명">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.ceo_nm" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="국가">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.nat_cd" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="대표자주민번호">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.ceo_id" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="통화">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.cury_bc" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인등록번호">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.co_no" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="결산월">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.set_mon" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="법인기호">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.ele_cd" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="회계계정체계">
                                <DxTextBox @bind-Text="@ViewModel.SelectedItem.sys_cd" />
                            </DxFormLayoutItem>
                        </DxFormLayout>
                </div>
            </div>
        </DxSplitterPane>
    </Panes>
</DxSplitter>


@code {

    //DxGridEx<Product> Grid2;

    // 컨텍스트 메뉴 참조 및 위치 변수
    DxGridEx<BCC100_Model> Grid = null!;

    // 데이터 모델
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public decimal Price { get; set; }
        public int Stock { get; set; }
    }
    public record ProductPart(int Id, string PartName, int Quantity, string Supplier);
    public record ProductLog(int Id, DateTime ChangeDate, string User, string Action);

    // 데이터 소스
    private List<Product> _products = new();
    private List<string> _categories = new() { "전자제품", "가구", "식료품" };
    private List<ProductPart> _productParts = new();
    private List<ProductLog> _productLogs = new();

    // 선택된 항목
    // --- 수정된 부분: 간단한 자동 속성으로 변경하여 @bind와의 충돌을 피합니다.
    public Product? SelectedProduct { get; set; }

    protected override void OnInitialized()
    {
        // // 샘플 데이터 생성
        // _products = Enumerable.Range(1, 50).Select(i => new Product
        // {
        //     Id = 1000 + i,
        //     Name = $"제품 {i}",
        //     Category = _categories[i % 3],
        //     Price = 10000 * (i % 10 + 1),
        //     Stock = i * 5
        // }).ToList();
    }

    // --- 수정된 부분: 이 메서드가 그리드의 'SelectedDataItemChanged' 이벤트 핸들러로 직접 사용됩니다.
    private void OnGridSelectionChanged(object? selectedItem)
    {
        // 이벤트 인자가 object 타입이므로, 이를 안전하게 BCC100_Model로 형변환합니다.
        var model = selectedItem as BCC100_Model;
        ViewModel.SelectItem(model);

        // --- 수정된 부분: UI를 강제로 다시 렌더링하여 변경사항을 즉시 반영합니다. ---
        StateHasChanged();

        // if (SelectedProduct == selectedItem) return;

        // SelectedProduct = (Product)selectedItem;

        // if (selectedItem == null)
        // {
        //     //StartTrackingChanges(null); // 선택 해제 시 추적 중지
        //     return;
        // }

        // // 상세 데이터 로드 (실제로는 API 호출)
        // _productParts = Enumerable.Range(1, 3).Select(i => new ProductPart(i, $"부품 {i}", i * 2, "공급업체 " + (i % 2 + 1))).ToList();
        // _productLogs = Enumerable.Range(1, 5).Select(i => new ProductLog(i, DateTime.Now.AddDays(-i), "User" + (i % 3), "속성 변경")).ToList();

        // // BasePageComponent의 변경 추적 기능 시작
        // //StartTrackingChanges(selectedItem);
    }

    private void OnDataChanged(object? _)
    {
        // 데이터가 변경되면 저장 버튼 활성화
        // if (HasChanges)
        // {
        //     ToolbarState.SetSaveButtonState(true);
        // }
    }

    protected override async void OnSearch()
    {
        await ViewModel.LoadGridDataAsync();
        await MsgBoxService.ShowAlert("완료", "조회되었습니다.");
    }

    protected override void OnAdd()
    {
        ViewModel.CreateNewItem();
        MsgBoxService.ShowAlert("완료", "신규");        
    }

    protected override async void OnSave()
    {
        if (ViewModel.SelectedItem != null)
        {
            await ViewModel.SaveSelectedItemAsync();
            await MsgBoxService.ShowAlert("완료", "저장되었습니다.");
        }

        //Console.WriteLine("저장 로직 실행...");
        // Console.WriteLine($"저장된 데이터: {JsonSerializer.Serialize(SelectedProduct)}");        
        // MsgBoxService.ShowAlert("완료", "저장");
    }
    protected override void OnDelete()
    {
        MsgBoxService.ShowAlert("완료", "삭제");                
    }

    protected override void OnPrint()
    {
        MsgBoxService.ShowAlert("완료", "프린트");                
    }


    public class BCC100_Model
    {
        public string co_cd { get; set; } = string.Empty;
        public string co_no { get; set; } = string.Empty;
        public string co_nm { get; set; } = string.Empty;
        public string? co_bnm { get; set; }
        public DateTime? co_dt { get; set; }
        public DateTime? fr_dt { get; set; }
        public DateTime? to_dt { get; set; }
        public string? co_bc { get; set; }
        public string? biz_bc { get; set; }
        public string? head_bs { get; set; }
        public string? nat_cd { get; set; }
        public string? addr { get; set; }
        public string? zip_cd { get; set; }
        public string? ceo_nm { get; set; }
        public string? ceo_id { get; set; }
        public string? approv_no { get; set; }
        public string? trade_no { get; set; }
        public string? sys_cd { get; set; }
        public string? cury_bc { get; set; }
        public string? capital_amt { get; set; }
        public string? set_mon { get; set; }
        public string? vat_kd { get; set; }
        public string? vat_bc { get; set; }
        public string? stamp { get; set; }
        public string? stamp2 { get; set; }
        public string? stamp_trade { get; set; }
        public string? logo { get; set; }
        public string? back_img { get; set; }
        public string? fta_cd { get; set; }
        public string? con_yn { get; set; }
        public string? cust_cd { get; set; }
        public string? main_co { get; set; }
        public DateTime? main_dt { get; set; }
        public string? main_yn { get; set; }
        public int? disp_sq { get; set; }
        public string? rmks { get; set; }
        public int? cid { get; set; }
        public DateTime? cdt { get; set; } 
        public int? mid { get; set; } 
        public DateTime? mdt { get; set; }
        public string? ele_cd { get; set; }
        public string? use_yn { get; set; }
        public string? fix_bc { get; set; }
        public string? logo2 { get; set; }
    }

    private BCC100_Model BCC100_F10 = new();

    private List<BCC100_Model> BCC100_g10_Items = new();

    // 페이지가 초기화될 때 비동기적으로 데이터를 로드합니다.
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // ViewModel을 생성하고 의존성을 주입합니다.
        ViewModel = new BCC100ViewModel(DapperService);
        // 데이터를 로드합니다.
        await ViewModel.LoadGridDataAsync();
    }

    // ViewModel 인스턴스
    private BCC100ViewModel ViewModel = null!;    

    // BCC100 페이지만을 위한 데이터와 상태, 로직을 관리하는 ViewModel 클래스입니다.
    public class BCC100ViewModel
    {
        private readonly IDapperService _dapperService;

        // --- 추가된 부분: UI 업데이트를 위한 이벤트 ---
        public event Action? OnChange;

        // 왼쪽 그리드에 표시될 데이터 목록
        public List<BCC100_Model> GridItems { get; private set; } = new();
        // 오른쪽 폼에 바인딩될 선택된 데이터
        public BCC100_Model? SelectedItem { get; set; } = new();

        // 폼의 활성화 상태를 제어하는 속성
        public bool IsFormEnabled { get; private set; } = false;

        public bool IsLoading { get; private set; } = false;

        public BCC100ViewModel(IDapperService dapperService)
        {
            _dapperService = dapperService;
        }

        // 그리드 데이터를 비동기적으로 로드하는 메서드
        public async Task LoadGridDataAsync()
        {
            IsLoading = true;
            NotifyStateChanged(); // 로딩 상태 시작 알림
            try
            {
                var sql = "SELECT co_cd, co_no, co_nm, co_bnm, co_dt, fr_dt, to_dt FROM bcc100";
                var result = await _dapperService.QueryAsync<BCC100_Model>(sql);
                GridItems = result.ToList();
                // 첫 번째 항목을 선택하거나, 데이터가 없으면 폼을 비활성화합니다.
                SelectItem(GridItems.FirstOrDefault());
            }
            catch (Exception ex)
            {
                // 실제 운영 환경에서는 로깅 라이브러리를 사용하세요.
                Console.WriteLine($"An error occurred while loading data: {ex.Message}");
                SelectItem(null); // 오류 발생 시 폼 비활성화
            }
            finally
            {
                IsLoading = false;
                NotifyStateChanged(); // 새 항목이 생성되었음을 UI에 알림
            }
        }

        // 새 항목을 생성하는 메서드
        public void CreateNewItem()
        {
            SelectedItem = new BCC100_Model();
            IsFormEnabled = true;

            NotifyStateChanged(); // 새 항목이 생성되었음을 UI에 알림
            // 기본값 설정이 필요하면 여기에 추가
            // SelectedItem.co_dt = DateTime.Now;
        }

        // 그리드 항목 선택 로직을 처리하는 메서드
        public void SelectItem(BCC100_Model? item)
        {
            if (item != null)
            {
                SelectedItem = item;
                IsFormEnabled = true;
            }
            else
            {
                SelectedItem = new BCC100_Model(); // Null을 방지하기 위해 빈 객체 할당
                IsFormEnabled = false; // 폼 비활성화
            }
            NotifyStateChanged(); // 선택된 항목이 변경되었음을 UI에 알림
        }

        // 현재 선택된 항목을 저장하는 메서드
        public async Task SaveSelectedItemAsync()
        {
            if (SelectedItem == null) return;

            // 여기에 Dapper를 사용한 INSERT 또는 UPDATE SQL 로직을 구현합니다.
            // 예: await _dapperService.ExecuteAsync(saveSql, SelectedItem);

            // 저장 후 그리드를 다시 로드하여 변경사항을 반영합니다.
            await LoadGridDataAsync();
        }

        // --- 추가된 부분: UI 업데이트를 트리거하는 메서드 ---
        private void NotifyStateChanged() => OnChange?.Invoke();
    }
}