@attribute [Authorize]
@inject MdiStateService MdiStateService
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<style>
    .mdi-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .mdi-tabs {
        flex-shrink: 0; /* 탭 바가 줄어들지 않도록 설정 */
    }

    .mdi-content-area {
        flex-grow: 1; /* 남은 공간을 모두 채움 */
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-top: none;
    }

    .no-tabs-message {
        justify-content: center;
        align-items: center;
        color: #6c757d;
        font-size: 1.2rem;
    }
</style>

@* @if (MdiStateService.OpenTabs.Any())
{ *@
    @* var activeTab = MdiStateService.OpenTabs[ActiveTabIndex]; *@

<div @ref=divContainer class="mdi-container" style="width:100%; height:100%">
        <DxTabs @ref=tabs @bind-ActiveTabIndex ="@ActiveTabIndex"
                AllowTabReorder="true"
                TabReordering="OnTabReordering"
                TabClosing="@OnTabClosing"
                RenderMode="TabsRenderMode.AllTabs"
                CssClass="mdi-tabs">

                <TabsBarTemplate>
                <div class="custom-tabs-bar">
                    <DxTabsHeader />
                    
                </div>
            </TabsBarTemplate>


            @foreach (var tab in MdiStateService.OpenTabs)
            {
                @* <DxTab Id="@tab.Id" Text="@tab.Title" AllowClose="true" /> *@
                <DxTabPage Id="@tab.Id" Text="@tab.Title" AllowClose="true">
                    <Content>
                    <div class="mdi-content-area">
                    @if (tab.PageNM is not null)
                    {
                        var componentType = Type.GetType(tab.PageNM);
                        if (componentType != null)
                        {
                            <DynamicComponent Type="@componentType" />
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                오류: '@tab.PageNM' 페이지를 찾을 수 없습니다.
                            </div>
                        }
                    }
                    </div>
                </Content>
                </DxTabPage>
            }            
        </DxTabs>        
    </div>
@* }
else
{
    <div class="p-4">
        <h3>Welcome!</h3>
        <p>Please select a menu item to open a tab.</p>
    </div>
} *@

@* <DxContextMenu @ref=menu>
    <Items>
        <DxContextMenuItem Click="CloseTab" Text="Close"></DxContextMenuItem>
        <DxContextMenuItem Click="CloseAllTabs" Text="Close All Tabs"></DxContextMenuItem>
        <DxContextMenuItem Click="CloseOtherTabs" Text="Close Other Tabs"></DxContextMenuItem>
        <DxContextMenuItem Click="RestoreAllTabs" Text="Restore Closed Tabs"></DxContextMenuItem>
    </Items>
</DxContextMenu> *@

@code {
    int ActiveTabIndex
    {
        get => MdiStateService.ActiveTabIndex;
        set => MdiStateService.SetActiveTab(value);
    }

    protected override void OnInitialized()
    {
        MdiStateService.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            // collection = new MDITabCollection(tabs!.GetOrderedTabs());
            // await InvokeAsync(StateHasChanged);
        }

        // var dotNetInstance = DotNetObjectReference.Create(this);
        // foreach(ITabInfo tab in tabs!.GetOrderedTabs()) {
        //     await JS.InvokeVoidAsync("addContextMenuHandler", divContainer, tab.CssClass, MdiStateService.GetTabTextByTabInfo(tab), dotNetInstance);
        // }

        // if(isReordering) {
        //     await StateHelper.SaveLayoutToLocalStorageAsync(collection);
        //     isReordering = false;
        // }
    }

    void OnTabClosing(TabCloseEventArgs e)
    {
        // var indexToClose = MdiStateService.OpenTabs.FindIndex(t => t.Id == e.TabInfo.Id.ToString());
        // if (indexToClose != -1)
        // {
        //     MdiStateService.CloseTab(indexToClose);
        // 

        
        MdiStateService.CloseTabID(e.TabInfo.Id);

        // DevExpress의 기본 닫기 동작을 막고, MdiStateService의 로직만 사용합니다.
        e.Cancel = true;

    }

    private async Task OnTabReordering(TabReorderEventArgs e)
    {
        // var vi1 = collection.GetVisibleIndexByTabText(e.FromTabInfo.Text);
        // var vi2 = collection.GetVisibleIndexByTabText(e.ToTabInfo.Text);
        // collection.SetVisibleIndexByTabText(e.FromTabInfo.Text, vi2);
        // collection.SetVisibleIndexByTabText(e.ToTabInfo.Text, vi1);
        // isReordering = true;
    }

    public void Dispose()
    {
        MdiStateService.OnChange -= StateHasChanged;
    }


    private DxTabs? tabs;

    private ElementReference divContainer;
    private DxContextMenu? menu;


    private string? clickedTabText;

    // [JSInvokable]
    // public async Task ShowContextMenu(MouseEventArgs e, string tabText)
    // {
    //     clickedTabText = tabText;
    //     if (menu != null)
    //     {
    //         await menu.ShowAsync(e);
    //     }
    // }

    // #region DxContextMenuItem.Click Event Handlers

    // private async Task CloseTab()
    // {
    //     // collection.SetVisibleByTabText(clickedTabText, false);
    //     // await StateHelper.SaveLayoutToLocalStorageAsync(collection);
    //     //MdiStateService.CloseTab(clickedTabText);
    // }

    // private async Task CloseAllTabs()
    // {
    //     // collection.SetVisibleAllTabs(false);
    //     // await StateHelper.SaveLayoutToLocalStorageAsync(collection);
    //     //collection.CloseAllTabs();
    // }

    // private async Task CloseOtherTabs()
    // {
    //     // collection.SetVisibleAllTabs(false);
    //     // collection.SetVisibleByTabText(clickedTabText, true);
    //     // await StateHelper.SaveLayoutToLocalStorageAsync(collection);
    // }

    // private async Task RestoreAllTabs()
    // {
    //     // collection.SetVisibleAllTabs(true);
    //     // await StateHelper.SaveLayoutToLocalStorageAsync(collection);
    // }

    // #endregion
}