@attribute [Authorize]
@inject MdiStateService MdiStateService
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @implements IDisposable *@
@implements IAsyncDisposable
@rendermode InteractiveServer

<style>
    .mdi-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%; /* 컨테이너가 부모의 전체 너비를 차지하도록 명시적으로 설정 */
    }

    .mdi-tabs-bar-container {
        display: flex;
        align-items: center;
        flex-shrink: 0;
        padding: 0 0.5rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

         .mdi-tabs-bar-container .dx-tabs {
            flex-grow: 1;
            border-bottom: none;
            min-width: 0; /* 탭이 많아질 때 DxTabs가 무한정 늘어나는 것을 방지하고 내부 스크롤이 생기도록 함 */
        }

    .mdi-content-area {
        flex-grow: 1;
        overflow-y: auto; /* 내용이 많아지면 세로 스크롤바를 자동으로 표시 */
        padding: 1rem; /* 콘텐츠 영역에 여백 추가 */
    }

    .no-tabs-message {
        justify-content: center;
        align-items: center;
        color: #6c757d;
        font-size: 1.2rem;
        border: 1px solid #dee2e6;
        border-top: none;
        display: flex;
    }

    .tab-template {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .tab-action-button {
        margin-left: 0.5rem;
        padding: 0.1rem 0.3rem;
        line-height: 1;
    }

    .tab-list-combobox {
        width: 200px;
        flex-shrink: 0;
        /*margin-left: auto; /* 콤보박스를 항상 오른쪽 끝으로 밀어냄 */
    }

     .theme-selector-combobox {
        width: 150px;
        flex-shrink: 0;
    }

    .popup-header-template {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .user-dropdown-content {
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        width: 250px;
    }
</style>


    <div class="mdi-container">
        <div class="mdi-tabs-bar-container">
            <DxTabs @ref="Tabs"                
                    AllowTabReorder="true"
                    TabReordering="OnTabReordering"
                    TabClosing="@OnTabClosing"
                    ActiveTabIndex="MdiStateService.ActiveTabIndex"
                    ActiveTabIndexChanged="OnActiveTabIndexChanged"
                    RenderMode="TabsRenderMode.AllTabs"
                    ScrollMode="TabsScrollMode.Auto"
                    CssClass="dx-tabs">

                @foreach (var tab in MdiStateService.OpenTabs)
                {
                    <DxTabPage @key="tab.Id" Id="@tab.Id" Text="@tab.Title" AllowClose="true">
                        <TextTemplate >
                            <div class="tab-template">
                                <span class="oi oi-document" aria-hidden="true"></span>
                                <span>@tab.Title</span>
                                <DxButton CssClass="tab-action-button"
                                          Click="@(() => MdiStateService.DetachTabToNewWindow(tab.Id))" RenderStyle="ButtonRenderStyle.Secondary" SizeMode="SizeMode.Small" title="팝업으로 전환"
                                          Context="tabactionbutton">
                                    <span class="oi oi-action-undo"></span>
                                </DxButton>
                            </div>
                        </TextTemplate>
                    </DxTabPage>
                }
            </DxTabs>

            <DxComboBox Data="@MdiStateService.OpenTabs"
                        TextFieldName="Title"
                        Value="@ActiveTab"           
                        ValueChanged="@((MDITab2 newValue) => OnActiveTabChangedByComboBox(newValue))"
                        CssClass="tab-list-combobox"
                        NullText="열린 탭 목록..."
                        ReadOnly="@(!MdiStateService.OpenTabs.Any())" />

            @* --- 추가된 부분: 테마 선택 콤보박스 --- *@
            <DxComboBox Data="@Themes"
                        TextFieldName="Name"
                        ValueFieldName="Value"
                        Value="@ThemeService.CurrentTheme"
                        ValueChanged="@((string newTheme) => OnThemeChanged(newTheme))"
                        CssClass="theme-selector-combobox" />

            <DxDropDown @bind-IsOpen="@IsOpen"
                        Width="400"
                        HeaderVisible="true"
                        HeaderText="Edit Contact"
                        FooterVisible="true"
                        CloseOnOutsideClick="true"
                    PositionMode="DropDownPositionMode.Bottom"
                    PositionTarget="#user-dropdown-button-content">
                <BodyContentTemplate>
                    <CascadingAuthenticationState>
                    @* <SampleEditForm /> *@
                    <div class="user-dropdown-content">
                        <AuthorizeView>
                            <Authorized Context="testsdf">
                                <div class="text-center">
                                    <strong>@testsdf.User.Identity?.Name</strong>님, 환영합니다.
                                </div>
                                <DxButton Text="개인정보 설정" Click="OpenUserSettings" RenderStyle="ButtonRenderStyle.Secondary" />
                                <DxButton Text="로그아웃" Click="Logout" RenderStyle="ButtonRenderStyle.Danger" />
                            </Authorized>
                        </AuthorizeView>
                    </div>
                    </CascadingAuthenticationState>                    
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@context.CloseCallback" />
                    <DxButton RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@context.CloseCallback" />
                </FooterContentTemplate>
            </DxDropDown>
            @* <DxDropDown @ref="UserDropDown"
                        CloseOnOutsideClick="true"
                        PositionTarget=".user-profile-button"
                        VerticalAlignment="DropDownVerticalAlignment.Bottom"
                        HorizontalAlignment="DropDownHorizontalAlignment.Right">
                
            </DxDropDown> *@
        <div id="user-dropdown-button-content">
                <DxButton CssClass="user-profile-button"
                          RenderStyle="ButtonRenderStyle.Light"
                          Click="@(() => IsOpen = true)">
                    <span class="oi oi-person"></span>
                </DxButton>
            </div>
        </div>

        <div class="mdi-content-area">
            @if (MdiStateService.OpenTabs.Any() && ActiveTab != null)
            {
                var tab = ActiveTab;

                if (string.IsNullOrEmpty(tab.PageNM))
                {
                    <div class="alert alert-warning m-3" role="alert">
                        이 탭에 대해 표시할 페이지가 지정되지 않았습니다.
                    </div>
                }
                else
                {
                    var componentType = Type.GetType(tab.PageNM);
                    if (componentType != null)
                    {
                        <DynamicComponent Type="@componentType" />
                    }
                    else
                    {
                        <div class="alert alert-danger m-3" role="alert">
                            오류: '@tab.PageNM' 페이지를 찾을 수 없습니다.
                        </div>
                    }
                }
            }
            @* else
            {
                <div class="no-tabs-message">
                    <span>열린 탭이 없습니다. 메뉴에서 항목을 선택하여 시작하세요.</span>
                </div>
            } *@
        </div>
    </div>

@code {
    private DxTabs Tabs { get; set; }
    private MDITab2 ActiveTab { get; set; }
    private DotNetObjectReference<MdiContainer> objRef;
    private DxDropDown UserDropDown { get; set; }
    bool IsOpen { get; set; } = false;

    // --- 추가된 부분: 테마 목록 데이터 ---
    private record ThemeInfo(string Name, string Value);
    private List<ThemeInfo> Themes = new List<ThemeInfo>
    {
        new("Blazing Berry", "blazing-berry"),
        new("Blazing Dark", "blazing-dark"),
        new("Office White", "office-white"),
        new("Purple", "purple")

    };

    // --- 추가된 메서드: 테마 변경 시 페이지를 새로고침합니다. ---
    private void OnThemeChanged(string newTheme)
    {
        ThemeService.SetTheme(newTheme);
        // 현재 URL로 페이지를 강제 새로고침하여 새 테마를 적용합니다.
        //=>새로고침 시 로그인 화면으로 전환되어 주석 처리함
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task Logout()
    {
        // var customAuthStateProvider = (TokenAuthenticationStateProvider)AuthenticationStateProvider;
        // customAuthStateProvider.MarkUserAsLoggedOut();
        // await JSRuntime.InvokeVoidAsync("authManager.removeToken");
        // NavigationManager.NavigateTo("/", forceLoad: true);
        // AuthenticationStateProvider를 통해 로그아웃 상태로 변경
        var tokenAuthStateProvider = (TokenAuthenticationStateProvider)AuthenticationStateProvider;
        tokenAuthStateProvider.MarkUserAsLoggedOut();

        // 로그아웃 후 로그인 페이지로 이동
        //NavigationManager.NavigateTo("/login");
        NavigationManager.NavigateTo("/");
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login"); // 로그인 페이지 경로
    }

    private void OpenUserSettings()
    {
        // TODO: 개인정보 설정 페이지를 여는 로직 구현
        // 예: MdiStateService.OpenTab("UserSettings", "개인정보 설정", "BlazorApp.Components.Pages.UserSettings");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 이 컴포넌트의 인스턴스를 JavaScript에서 호출할 수 있도록 등록합니다.
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setMdiContainerHelper", objRef);
            // --- 추가된 부분: 부모창의 닫힘 이벤트 핸들러를 등록합니다. ---
            await JSRuntime.InvokeVoidAsync("registerParentUnloadHandler");
        }
    }

    // --- 추가: JavaScript에서 호출될 메서드 ---
    [JSInvokable]
    public void ReAttachTab(string tabId)
    {
        // 서비스의 탭 복원 메서드를 호출합니다.
        MdiStateService.AttachWindowToTab(tabId);
    }

    [JSInvokable]
    public void NotifyPopupWindowClosed(string tabId)
    {
        MdiStateService.ClearDetachedWindowInfo(tabId);
    }

    protected override void OnInitialized()
    {
        MdiStateService.OnChange += UpdateActiveTab;
        UpdateActiveTab();
    }

    private void OnActiveTabIndexChanged(int newIndex)
    {
        MdiStateService.SetActiveTab(newIndex);
    }

    private void OnActiveTabChangedByComboBox(MDITab2 selectedTab)
    {
        if (selectedTab != null)
        {
            var index = MdiStateService.OpenTabs.IndexOf(selectedTab);
            MdiStateService.SetActiveTab(index);
        }
    }

    private void OnTabClosing(TabCloseEventArgs e)
    {
        //var tabIdToClose = e.TabInfo.Id.ToString();
        var tabIdToClose = e.TabInfo.Id.ToString();
        MdiStateService.CloseTabID(tabIdToClose);
        e.Cancel = true;
    }

    private async Task OnTabReordering(TabReorderEventArgs e)
    {
        // var vi1 = collection.GetVisibleIndexByTabText(e.FromTabInfo.Text);
        // var vi2 = collection.GetVisibleIndexByTabText(e.ToTabInfo.Text);
        // collection.SetVisibleIndexByTabText(e.FromTabInfo.Text, vi2);
        // collection.SetVisibleIndexByTabText(e.ToTabInfo.Text, vi1);
        // isReordering = true;
    }

    private void UpdateActiveTab()
    {
        if (MdiStateService.OpenTabs.Any() && MdiStateService.ActiveTabIndex >= 0 && MdiStateService.ActiveTabIndex < MdiStateService.OpenTabs.Count)
        {
            ActiveTab = MdiStateService.OpenTabs[MdiStateService.ActiveTabIndex];
        }
        else
        {
            ActiveTab = null;
        }
        StateHasChanged();
    }

    // public void Dispose()
    // {
    //     MdiStateService.OnChange -= UpdateActiveTab;
    // }

    public async ValueTask DisposeAsync()
    {
        MdiStateService.OnChange -= UpdateActiveTab;
        if (objRef != null)
        {
            // JavaScript에 등록된 참조를 해제하여 메모리 누수를 방지합니다.
            await JSRuntime.InvokeVoidAsync("setMdiContainerHelper", null);
            objRef.Dispose();
        }
    }
}